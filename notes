### pyramid Generator ###
1) JavaScript is the programming language that powers the web. Unlike the HTML and CSS you have learned previously, JavaScript is most commonly used to write logic instead of markup.
One of the most important concepts in programming is variables. A variable points to a specific memory address that stores a value. Variables are given a name which can be used throughout your code to access that value.
Declaring a variable means giving it a name. In JavaScript, this is often done with the let keyword. For example, here is how you would declare a hello variable:
let hello;
Variable naming follows specific rules: names can include letters, numbers, dollar signs, and underscores, but cannot contain spaces and must not begin with a number.
Declare a character variable in your code.
Note: It is common practice to end statements in JavaScript with a semicolon. ;
2) Your character variable currently does not have a value. You can assign a value using the assignment operator =. For example:
let hello = "Hello";
Assigning a value to a variable at the moment of its declaration is known as initialization.
Initialize your character variable by assigning it the value "Hello" during its declaration.
3) JavaScript has seven primitive data types, with String being one of them. In JavaScript, a string represents a sequence of characters and can be enclosed in either single (') or double (") quotes.
Note that strings are immutable, which means once they are created, they cannot be changed.
Change your "Hello" string to use single quotes.
4) The console allows you to print and view JavaScript output. You can send information to the console using console.log(). For example, this code will print "Naomi" to the console:
let developer = "Naomi";
console.log(developer);
The code above accesses the developer variable with its name in the console.log(). Note that the value between the parentheses is the value that will be printed.
Print the value of the character variable to the console. Then, click the "Console" button to view the JavaScript console.
5) When a variable is declared with the let keyword, you can reassign (or change the value of) that variable later on. In this example, the value of programmer is changed from "Naomi" to "CamperChan".
let programmer = "Naomi";
programmer = "CamperChan";
Note that when reassigning a variable that has already been declared, you do not use the let keyword.
After your console.log, assign the value "World" to your character variable.
6) Now log your character variable to the console again. You should see the string "Hello", then the string "World", in the console.
7) When variable names are more than one word, there are specific naming conventions for how you capitalize the words. In JavaScript, the convention to use is camel case.
Camel case means that the first word in the name is entirely lowercase, but the following words are all title-cased. Here are some examples of camel case:
let variableOne;
let secondVariable;
let yetAnotherVariable;
let thisIsAnAbsurdlyLongName;
Use camel case to declare a new secondCharacter variable.
8) When you declare a variable without initializing it, it is considered uninitialized. Currently, your secondCharacter variable is uninitialized.
Add a console.log() to see what the value of your secondCharacter variable is.
9) The default value of an uninitialized variable is undefined. This is a special data type that represents a value that does not have a definition yet.
You can still assign a value to an uninitialized variable. Here is an example:
let uninitialized;
uninitialized = "assigned";
Assign the string "Test" to your secondCharacter variable below your declaration. Open the console to see how your log has changed.
10) You can also assign the value of a variable to another variable. For example:
let first = "One";
let second = "Two";
second = first;
The second variable would now have the value "One".
To see this in action, change your secondCharacter assignment from "Test" to your character variable.
Then open the console to see what gets logged.
11) You are now ready to declare your next variable. Remove both console.log statements, and the character reassignment.
Also remove your secondCharacter variable, but leave the character initialization unchanged.
12) Use let to declare a count variable. Assign it the number 8. When using a number value, you do not use quotes. For example:
let money = 100;
13) With the number data type, you can perform mathematical operations, like addition. Try printing count + 1 to the console.
14) - subtraction , * multiplication , / division;
15) In programming, you will often need to work with lots of data. There are many data structures that can help you organize and manage your data. One of the most basic data structures is an array.
An array is a non-primitive data type that can hold a series of values. Non-primitive data types differ from primitive data types in that they can hold more complex data. Primitive data types like strings and numbers can only hold one value at a time.
Arrays are denoted using square brackets ([]). Here is an example of a variable with the value of an empty array:
let array = [];
Declare a rows variable and assign it an empty array.
16) When an array holds values, or elements, those values are separated by commas. Here is an array that holds two strings:
let array = ["first", "second"];
Change your rows declaration to be an array with the strings "Naomi", "Quincy", and "CamperChan". The order of values in an array is important, so follow that order. Remember that strings are case-sensitive.
17) You can access the values inside an array using the index of the value. An index is a number representing the position of the value in the array, starting from 0 for the first value.
You can access the value using bracket notation, such as array[0].
Use console.log and bracket notation to print the first value in your rows array.
18) Arrays are special in that they are considered mutable. This means you can change the value at an index directly.
For example, this code would assign the number 25 to the second element in the array:
let array = [1, 2, 3];
array[1] = 25;
Update the third element of your rows array to be the number 10. Then print the rows array to your console.
19) Notice how the value inside your rows array has been changed directly? This is called mutation. As you learn more about arrays, you will learn when to mutate an array, and when you should not.
Before moving on, this is a great opportunity to learn a common array use. Currently, your code accesses the last element in the array with rows[2]. But you may not know how many elements are in an array when you want the last one.
You can make use of the .length property of an array - this returns the number of elements in the array. To get the last element of any array, you can use the following syntax:
array[array.length - 1]
array.length returns the number of elements in the array. By subtracting 1, you get the index of the last element in the array. You can apply this same concept to your rows array.
Update your rows[2] to dynamically access the last element in the rows array. Refer to the example above to help you.
You should not see anything change in your console.
20) For now, remove your first console log and your rows[2] assignment. Leave the second rows log statement for later.
21) A method in JavaScript is a function that's associated with certain values or objects. An example you've already encountered is the .log() method, which is part of the console object.
Arrays have their own methods, and the first you will explore is the .push() method. This allows you to "push" a value to the end of an array. Here is an example to add the number 12 to the end of an array:
array.push(12);
Use .push() to add the string "freeCodeCamp" to the end of your rows array. Add this code before your console.log so you can see the change you made to your array.
22) Another method essential for this project is the .pop() method. It removes the last element from an array and returns that element.
When a method returns a value, you can think of it as giving the value back to you, making it available for use in other parts of your code.
Declare a popped variable, and assign it the result of rows.pop(). Then, log your popped variable.
23) You should have seen "freeCodeCamp" printed to the console. This is because .pop() returns the value that was removed from the array - and you pushed "freeCodeCamp" to the end of the array earlier.
But what does .push() return? Assign your existing rows.push() to a new pushed variable, and log it.
24) Were you expecting to see 4 in the console? .push() returns the new length of the array, after adding the value you give it.
It is important to be aware of what values a method returns. Take some time to experiment with .push() and .pop(). When you are ready, remove all of your .push() and .pop() calls, and your console.log statements.
25) Change your rows declaration to be assigned an empty array again.
Also, change your 'Hello' string to use double quotes again. Generally, it does not matter which of the two you prefer, but you will want to be consistent in that choice throughout your project.
26) The let keyword allows a variable to be reassigned. This means you could change character later to be a completely different value.
For this project, you will not want to change these variable values. So instead, you should use const to declare them. const variables are special.
First, a const variable cannot be reassigned like a let variable. This code would throw an error:
const firstName = "Naomi";
firstName = "Jessica";
A const variable also cannot be uninitialized. This code would throw an error:
const firstName;
Replace your let keywords with const.
27) You are now ready to start building your pyramid generator. Your character variable will serve as the building block for the pyramid.
"Hello" might not work very well for that. Change the value of character to be the hash character "#".
28) To generate a pyramid, you will need to create multiple rows. When you have to perform a task repeatedly until a condition is met, you will use a loop. There are many ways to write a loop.
You are going to start with a basic for loop. for loops use the following syntax:
for (iterator; condition; iteration) {
  logic;
}
In the upcoming steps, you'll explore each component of a loop in detail. For now, construct a for loop that includes the terms "iterator", "condition", and "iteration" for the three components. Keep the loop body, the section within the curly braces {}, empty.
29) Your loop now needs a proper iterator. The iterator is a variable you can declare specifically in your for loop to control how the loop iterates or goes through your logic.
It is a common convention to use i as your iterator variable in a loop. A for loop allows you to declare this in the parentheses (). For example, here is a for loop that declares an index variable and assigns it the value 100.
for (let index = 100; "second"; "third") {}
Replace the string "iterator" with a let declaration for the variable i. Assign it the value 0 to start. This will give the i variable the value 0 the first time your loop runs.
30) The condition of a for loop tells the loop how many times it should iterate. When the condition becomes false, the loop will stop.
In JavaScript, a Boolean value can be either true or false. These are not strings - you will learn more about the difference later on.
For now, you will use the less than operator (<). This allows you to check if the value on the left is less than the value on the right. For example, count < 3 would evaluate to true if count is 2, and false if count is 4.
Replace your "condition" string with a condition to check if i is less than count.
31) Your iteration statement will tell your loop what to do with the iterator after each run.
When you reassign a variable, you can use the variable to reference the previous value before the reassignment. This allows you to do things like add three to an existing number. For example, bees = bees + 3; would increase the value of bees by three.
Use that syntax to replace your "iteration" string with a reassignment statement that increases i by one.
32) Your loop should now run eight times. Inside the body of the loop, print the value of the i iterator and see what happens.
33) You should see the numbers zero through seven printed in your console, one per line. This will serve as the foundation for generating your pyramid.
Replace your log statement with a statement to push i to your rows array.
34) Unfortunately, now you cannot see what your loop is doing.
Use let to declare a result variable, and assign it an empty string. An empty string is represented by quotation marks with nothing between them, such as "".
35) Add a log statement to print the value of result. Depending on which console you use, you may not see anything printed.
36) To manipulate the result string, you will use a different type of loop. Specifically, a for...of loop, which iterates over each item in an iterable object and temporarily assigns it to a variable.
The syntax for a for...of loop looks like:
for (const value of iterable) {}
Note that you can use const because the variable only exists for a single iteration, not during the entire loop.
Create a for...of loop to iterate through your rows array, assigning each value to a row variable.
37) Remember in your previous loop that you used the addition operator + to increase the value of i by 1.
You can do a similar thing with a string value, by appending a new string to an existing string. For example, hello = hello + " World"; would add the string " World" to the existing string stored in the hello variable. This is called concatenation.
In your for...of loop, use the addition operator to concatenate the row value to the result value.
38) Now all of your numbers are appearing on the same line. This will not work for creating a pyramid.
You will need to add a new line to each row. However, pressing the return key to insert a line break between quotes in JavaScript will result in a parsing error. Instead, you need to use the special escape sequence \n, which is interpreted as a new line when the string is logged. For example:
lineOne = lineOne + "\n" + lineTwo;
Use a second addition operator to concatenate a new line between the existing result value and the added row value.
39) Printing numbers won't result in a visually appealing pyramid. Now that you're outputting the formatted content of your rows array, it's time to update your original loop.
Instead of pushing i to the array, push the value of your character variable.
40) Now you have a series of # characters, but the pyramid shape is still missing. Fortunately, the i variable represents the current "row" number in your loop, enabling you to use it for crafting a pyramid-like structure.
To achieve this, you will use the .repeat() method available to strings. This method accepts a number as an argument, specifying the number of times to repeat the target string. For example, using .repeat() to generate the string "Code! Code! Code!":
const activity = "Code! ";
activity.repeat(3);
Use the .repeat() method on your character, and give it i for the number.
41) You're getting closer! At this point, you're encountering what's known as an off-by-one error, a frequent problem in zero-based indexing languages like JavaScript.
The first index of your rows array is 0, which is why you start your for loop with i = 0. But repeating a string zero times results in nothing to print.
To fix this, add 1 to the value of i in your .repeat() call. Do not assign it back to i like you did in your loop conditions.
42) The logic for formatting this pyramid is likely going to get complicated, which means it's a great time to extract that code into a function.
A function is a block of code that can be reused throughout your application. Functions are declared with the following syntax:
function name(parameter) {}
The function keyword tells JavaScript that the name variable is going to be a function. parameter is a variable that represents a value that is passed into the function when it is used. A function may have as many, or as few, parameters as you'd like. Like a for loop, the space between the curly braces is the function body.
Declare a padRow function. Do not create any parameter variables yet. The function body should be empty. Remember that you need to use camel case for your naming convention.
43) In order to use a function, you need to call it. A function call tells your application to run the code from the function wherever you choose to call it. The syntax for a function call is the function name followed by parentheses. For example, this code defines and calls a test function.
function test() {}
test();
Call your padRow function.
44) You are calling your padRow function, but not doing anything with that function call. All functions in JavaScript return a value, meaning they provide the defined result of calling them for you to use elsewhere.
To see the result of calling your padRow function, declare a call variable and assign your existing padRow call to that variable.
45) Now add a log statement to print the value of your call variable.
46) Your call variable has an undefined value, even though you defined it! This is because your padRow function does not currently return a value. By default, functions return undefined as their value.
In order to return something else, you need to use the return keyword. Here is an example of a function that returns the string "Functions are cool!":
function demo() {
  return "Functions are cool!";
}
Use the return keyword to have your function return the string "Hello!".
47) When you have a value that is explicitly written in your code, like the "Hello!" string in your function, it is considered to be hard-coded. Hard-coding a value inside a function might not make it as reusable as you'd like.
Instead, you can define parameters for the function. Parameters are special variables that are given a value when you call the function, and can be used in your function to dynamically change the result of the function's code.
To add a parameter to your function, you need to add a variable name inside the parentheses. For example, this demo function has a name parameter:
function demo(name) {}
name sounds like a useful parameter, so go ahead and add it to your padRow function.
48) A function does not have to return a hard-coded value. It can return the value stored in a variable. Parameters are special variables for a function, so they can also be returned.
Change your padRow function to return the name parameter directly.s
49) If you open your console again, you'll see that your padRow function is returning undefined, even though you defined a return value! This is because parameters need to be given a value when you call the function.
When you pass a value to a function call, that value is referred to as an argument. Here is an example of calling a demo function and passing "Naomi" as the argument for the name parameter.
function demo(name) {
  return name;
}
demo("Naomi");
Pass your own name as the argument for the name parameter in your padRow call. Remember that your name is a string, so you'll need to use quotes.
50) Variables in JavaScript are available in a specific scope. In other words, where a variable is declared determines where in your code it can be used.
The first scope is the global scope. Variables that are declared outside of any "block" like a function or for loop are in the global scope. Your character, count, and rows variables are all in the global scope.
When a variable is in the global scope, a function can access it in its definition. Here is an example of a function using a global title variable:
const title = "Professor ";
function demo(name) {
  return title + name;
}
demo("Naomi")
This example would return "Professor Naomi". Update your padRow function to return the value of concatenating your character variable to the beginning of the name parameter.
51) Variables can also be declared inside a function. These variables are considered to be in the local scope, or block scope. A variable declared inside a function can only be used inside that function. If you try to access it outside of the function, you will either get undefined or an error.
To see this in action, use const to declare a test variable in your padRow function. Initialise it with the value "Testing".
Then, below your function, try to log test to the console. You will see an error because it is not defined outside of the function's local scope. Remove that console.log to pass the tests and continue.
52) There is a bit of a problem, here. Your test declaration is currently after your return statement. An important thing to know about the return keyword is that it does not just define a value to be returned from your function, it also stops the execution of your function code. This means that any code after a return statement will not run.
Move your test initialization to the line above your return statement.
53) If you try to add a console.log(test) call below your padRow function, you would see an error. This is because test is defined in the local scope, meaning you cannot access it in the global scope (outside of the padRow function).
Returning a value from a function brings that value into the scope where the function was called. To bring your "Testing" value from the padRow function into the global scope, update your return statement to return only the test variable.
54) Now your call variable has the value "Testing". But your function is no longer using the name parameter.
Remove the name parameter from your function declaration, then remove your "CamperChan" string from the padRow call.
55) Because your function was no longer using the parameter, changing the value passed in the call did not affect it.
Go ahead and remove the test declaration from your padRow function. Also, remove the return statement, so your function is empty again.
56) As expected, your function now returns undefined again. Your call variable is not necessary any more, so remove the call declaration and the console.log for the call variable.
57) In order to know how to format a row, your padRow function will need to know which row number you are on, and how many rows in total are being generated.
The best way to do this is by creating function parameters for them. Give your padRow function a rowNumber and rowCount parameter. Multiple parameters are separated by a comma:
function name(first, second) {}
58) Remember in an earlier step, you learned about return values. A function can return a value for your application to consume separately.
In a function, the return keyword is used to specify a return value. For example, this function would return the value given to the first parameter:
function name(parameter) {
  return parameter;
}
Use the return keyword to return the value of the character variable, repeated rowNumber times.
59) A function call allows you to actually use a function. You may not have been aware of it, but the methods like .push() that you have been using have been function calls.
A function is called by referencing the function's name, and adding (). Here's how to call a test function:
test();
Replace the character.repeat(i + 1) in your .push() call with a function call for your padRow function.
60) Your padRow function has two parameters which you defined. Values are provided to those parameters when a function is called.
The values you provide to a function call are referred to as arguments, and you pass arguments to a function call. Here's a function call with "Hello" passed as an argument:
test("Hello");
Pass i + 1 and count as the arguments to your padRow call. Like parameters, arguments are separated by a comma.
61) You should now see the same bunch of characters in your console. Your padRow function is doing the exact same thing you were doing earlier, but now it's in a reusable section of its own.
Use the addition operator to concatenate a blank space " " to the beginning and end of your repeated character string.
62) Now it is time for a bit of math. Consider a three-row pyramid. If we want it centered, it would look something like:
··#··
·###·
#####
Empty spaces have been replaced with interpuncts, or middle dots, for readability. If you extrapolate the pattern, you can see that the spaces at the beginning and end of a row follow a pattern.
Update your blank space strings to be repeated rowCount - rowNumber times.
Open up the console to see the result.
63) You can pass full expressions as an argument. The function will receive the result of evaluating that expression. For example, these two function calls would yield the same result:
test(2 * 3 + 1);
test(7);
Looking at the pattern again:
··#··
·###·
#####
Update the character value to be repeated 2 * rowNumber - 1 times.
Open up the console again to see the updated result
64) Your pyramid generator now functions as expected. But this is an excellent opportunity to further explore the code you have written.
The addition operator is not the only way to add values to a variable. The addition assignment operator can be used as shorthand to mean "take the original value of the variable, add this value, and assign the result back to the variable." For example, these two statements would yield the same result:
test = test + 1;
test += 1;
Update your iterator statement in the for loop to use addition assignment.
65) Because you are only increasing i by 1, you can use the increment operator ++. This operator increases the value of a variable by 1, updating the assignment for that variable. For example, test would become 8 here:
let test = 7;
test++;
Replace your addition assignment with the increment operator for your loop iteration.
66) Rather than having to pass i + 1 to your padRow call, you could instead start your loop at 1. This would allow you to create a one-indexed loop.
Update your iterator to start at 1 instead of 0.
67) The pyramid looks a little funny now. Because you are starting the loop at 1 instead of 0, you do not need to add one to i when you pass it to padRow.
Update the first argument of your padRow call to be i.
68) Unfortunately, now the bottom of the pyramid has disappeared. This is because you have created another off-by-one error.
Your original loop went for i values from 0 to 7, because count is 8 and your condition requires i to be less than count. Your loop is now running for i values from 1 to 7.
Your loop needs to be updated to run when i is 8, too. Looking at your logic, this means your loop should run when i is less than or equal to count. You can use the less than or equal to operator <= for this.
Update your loop condition to run while i is less than or equal to count.
69) Comments can be helpful for explaining why your code takes a certain approach, or leaving to-do notes for your future self.
In JavaScript, you can use // to leave a single-line comment in your code.
Add a single-line comment above your function to remind yourself to change the code to a different kind of loop.
70) single line comment
71) multiline comment
72) Your pyramid has disappeared again. That's okay - that is to be expected.
Before you create your new loop, you need to learn about if statements. An if statement allows you to run a block of code only when a condition is met. They use the following syntax:
if (condition) {
  logic
}
Create an if statement with the boolean true as the condition. In the body, print the string "Condition is true".
72) You'll see the string printed in the console, because true is in fact true.
Change the condition of your if statement to the boolean false.
73) Now the string is no longer printing, because false is not true. But what about other values?
Try changing the condition to the string "false".
74) The text has appeared again! This is because "false" is a string, which when evaluated to a boolean becomes true. This means "false" is a truthy value.
A truthy value is a value that is considered true when evaluated as a boolean. Most of the values you encounter in JavaScript will be truthy.
A falsy value is the opposite - a value considered false when evaluated as a boolean. JavaScript has a defined list of falsy values. Some of them include false, 0, "", null, undefined, and NaN.
Try changing your if condition to an empty string "", which is a falsy value.
75) The text is gone again! Empty strings evaluate to false, making them a falsy value. You will learn more about truthy and falsy values in future projects.
For now, remove your if statement entirely. Use let to declare a continueLoop variable and assign it the boolean false. Then use let to declare a done variable and assign it the value 0.
76) A while loop will run over and over again until the condition specified is no longer true. It has the following syntax:
while (condition) {
  logic;
}
Use that syntax to declare a while loop with continueLoop as the condition. The body should be empty.
77) Right now, if you change continueLoop to true, your while loop will run forever. This is called an infinite loop, and you should be careful to avoid these. An infinite loop can lock up your system, requiring a full restart to escape.
To avoid this, start by using the increment operator to increase the value of the done variable inside your loop.
78) The equality operator == is used to check if two values are equal. To compare two values, you'd use a statement like value == 8.
Add an if statement to your loop. The statement should check if done is equal to count using the equality operator.
79) The equality operator can lead to some strange behavior in JavaScript. For example, "0" == 0 is true, even though one is a string and one is a number.
The strict equality operator === is used to check if two values are equal and share the same type. As a general rule, this is the equality operator you should always use. With the strict equality operator, "0" === 0 becomes false, because while they might have the same value of zero, they are not of the same type.
Update your done == count condition to use the strict equality operator.
80) When done has reached the value of count, we want the loop to stop executing.
Inside your if body, assign the boolean false to your continueLoop variable.
81) To make your pyramid generate again, push the result of calling padRow with done and count as the arguments to your rows array, similar to what you did in your first loop.
82) The strict inequality operator !== allows you to check if two values are not equal, or do not have the same type. The syntax is similar to the equality operator: value !== 4.
Update your while loop condition to check if done is not equal to count.
83) Since you have moved the comparison into the while condition, you can remove your entire if statement.
84) Your loop is no longer relying on the continueLoop variable. This makes the variable an unused declaration. Generally, you want to avoid unused declarations to prevent future confusion.
Remove your continueLoop variable.
85) Your pyramid generator is still working. However, it could be possible to end up with an infinite loop again.s
Because you are only checking if done is not equal to count, if done were to be larger than count your loop would go on forever.
Update your loop's condition to check if done is less than or equal to count.
86) Using done to track the number of rows that have been generated is functional, but you can actually clean up the logic a bit further.
Arrays have a special length property that allows you to see how many values, or elements, are in the array. You would access this property using syntax like myArray.length.
Update your condition to check if rows.length is less than or equal to count.
87) You can also replace the done reference in your padRow call.
Note that rows.length here would give you an off-by-one error, because done is incremented before the call.
So you'll need to replace done here with rows.length + 1. When you do this, you may see a Range Error, because we've created another off-by-one error.
You'll need to change the while condition to use the less than operator, instead of the less than or equal operator.
88) Now you no longer need your done variable. Remove the increment operation from your loop, and the variable declaration for done.
89) That's a very clean and functional loop. Nice work! But there's still more to explore.
Use a multi-line comment to comment out your while loop.
90) What if you made your pyramid upside-down, or inverted? Time to try it out!
Start by creating a new for loop. Declare your iterator i and assign it the value of count, then use the boolean false for your condition and iteration statements.
91) Because you are going to loop in the opposite direction, your loop needs to run while i is greater than 0. You can use the greater than operator > for this.
Set your loop's condition to run when i is greater than 0.
92) Your iteration statement is also going to be different. Instead of adding 1 to i with each loop, you need to subtract 1.
Like you did earlier with i = i + 1, update your iteration statement to give i the value of subtracting 1 from itself.
93) Again, push the result of calling padRow with your i and count variables to your rows array.
Open up the console to see the upside-down pyramid.
94) Just like addition, there are different operators you can use for subtraction. The subtraction assignment operator -= subtracts the given value from the current variable value, then assigns the result back to the variable.
Replace your iterator statement with the correct statement using the subtraction assignment operator.
95) Because you are only subtracting one from i, you can use the decrement operator --.
Replace your subtraction assignment with the decrement operator.
96) Use a multi-line comment to comment out this loop as well, to prepare for the next approach.
97) You can actually build the inverted pyramid without needing to loop "backwards" like you did.
To do this, you'll need to learn a couple of new array methods. Start by using const to declare a numbers variable. Assign it an array with the elements 1, 2, and 3. Then log the numbers array.
98) The .unshift() method of an array allows you to add a value to the beginning of the array, unlike .push() which adds the value at the end of the array. Here is an example:
const numbers = [1, 2, 3];
numbers.unshift(5);
The numbers array would now be [5, 1, 2, 3].
Use const to declare an unshifted variable, and assign it the result of calling .unshift() on your numbers array. Pass 5 as the argument. Then print your unshifted variable.
99) Notice that like .push(), .unshift() returns the new length of the array after the element is added.
Arrays also have a .shift() method. This will remove the first element of the array, unlike .pop() which removes the last element. Here is an example of the .shift() method:
const numbers = [1, 2, 3];
numbers.shift();
The numbers array would be [2, 3].
Declare a shifted variable, assign it the result of calling .shift() on your numbers array, and print the variable.
100) Now that you've tried these methods, you can do another inverted pyramid approach. But first you need to clean up your experimentation.
Remove your numbers array, and the method calls and log calls.
101) Sometimes you may wish to bring back previous code that you commented out. You can do so by removing the /* and */ around that code. This is called uncommenting.
Uncomment only your first for loop. Leave the single line comment and the other two multi line comments in place.
102) Your pyramid is no longer inverted. This is because you are adding new rows to the end of the array.
Update your loop body to add new rows to the beginning of the array.
103) Your pyramid is no longer inverted. This is because you are adding new rows to the end of the array.
Update your loop body to add new rows to the beginning of the array.
104) Use an if statement to check if inverted is true. Remember that you do not need to use an equality operator here.
105) Now move your .unshift() call into your if block.
106) Sometimes you will want to run different code when an if condition is false. You can do this by adding an else block. An else block will only evaluate if the if block does not evaluate.
The syntax to add an else block is:
if (condition) {
  logic
} else {
  logic
}
Add an else block to your if block.
107) When inverted is false, you want to build a standard pyramid. Use .push() like you have in previous steps to achieve this.
108) Your pyramid generator is now in a finished state, with more functionality than you originally planned! The next step is to clean up your code.
Remove all comments, both single- and multi-line, from your code.
109) Nice work! Experiment with different values for your character, count, and inverted variables.
When you are ready to move on to your next project, set character to "!", count to 10, and inverted to false to continue.
Congratulations on completing your first JavaScript project!

### Build Role Playing games ###

1) JavaScript is a powerful language which allows you to build websites that are interactive
2) Now you can start writing your JavaScript. Begin by creating a script element. This element is used to load JavaScript into your HTML file. You should use an opening <script> and closing </script> tag.
3) One of the most powerful tools is your developer console. Depending on your browser, this might be opened by pressing F12 or Ctrl+Shift+I. On Mac, you can press Option + ⌘ + C and select "Console". You can also click the "Console" button above the preview window to see our built-in console.
The developer console will include errors that are produced by your code, but you can also use it to see values of variables in your code, which is helpful for debugging.
Add a console.log("Hello World"); line between your script tags. Then click the "Console" button to open the console. You should see the text "Hello World".
Note how the line ends with a semi-colon. It is common practice in JavaScript to end your code lines with semi-colons.
4) Before you start writing your project code, you should move it to its own file to keep things organized.
Remove your console.log("Hello World"); line. Then give your now empty script element a src attribute set to ./script.js.
5) Your view has been switched to your new script.js file. Remember that you can use the tabs above to switch between files.
Add your console.log("Hello World"); line to this file, and see it appear in your console.
6) In JavaScript, a variable is used to hold a value. To use a variable, you must first declare it. For example, to declare a variable called camperbot, you would write:
let camperbot;
The let keyword tells JavaScript you are declaring a variable. Declare a variable called xp.
7) Variables can be assigned a value. When you do this while you declare it, this is called initialization. For example:
let age = 32;
Initialize your xp variable to have a value of 0, a number.
8) Initialize another variable called health with a value of 100, and a variable called gold with a value of 50.
9) Create another variable called currentWeapon and set it to 0.
When a variable name has multiple words, the convention in JavaScript is to use what's called camelCase. The first word is lowercase, and the first letter of every following word is uppercase.
let thisIsCamelCase;
10) declare a variable called fighting end with a semicolon;
11) Declare two more variables named monsterHealth and inventory, but do not initialize them.
12) The variables you have assigned have all had values that are numbers. JavaScript has multiple different data types. The next one you will use is the string. Strings are used to store things like words or text. Strings are surrounded with double quotes, single quotes, or backticks. Here is an example of declaring a variable with a string:
let developer = "Naomi";
Assign the inventory variable to have the value of stick.
13) The player's inventory in your game will be able to hold multiple items. You will need to use a data type that can do this. An array can be used to hold multiple values. For example:
let order = ["first", "second", "third"];
This is an array which holds three values. Notice how the values are separated by commas.
Change your inventory variable to be an array with the strings "stick", "dagger", and "sword".
14) For now, you want the player to start with just the "stick". Change the inventory array to have "stick" as its only value.
15) In your role playing game, users will be able to track their stats, buy weapons, and fight monsters. Before you can continue with the interactive JavaScript portion of the game, you need to first create the HTML elements that will display the game information.
Create four div elements within your #game element. Give them the following respective id values, in order: stats, controls, monsterStats, and text.
16) Create three span elements within your #stats element. Give each of them the class stat. Then give the first one the text XP: 0, the second one the text Health: 100, and the third one the text Gold: 50.
17) Wrap the numbers 0, 100, and 50 in span elements, and wrap those new span elements in strong elements. Then give your new span elements id values of xpText, healthText, and goldText, respectively.
Your answer should follow this basic structure:
<span class="stat">TEXT <strong><span id="VALUE">TEXT</span></strong></span>
18) For your #controls element, create three button elements. The first should have the id set to button1, and the text Go to store. The second should have the id set to button2, and the text Go to cave. The third should have the id set to button3, and the text Fight dragon.
19) JavaScript interacts with the HTML using the Document Object Model, or DOM. The DOM is a tree of objects that represents the HTML. You can access the HTML using the document object, which represents your entire HTML document.
One method for finding specific elements in your HTML is using the querySelector() method. The querySelector() method takes a CSS selector as an argument and returns the first element that matches that selector. For example, to find the <h1> element in your HTML, you would write:
let h1 = document.querySelector("h1");
Note that h1 is a string and matches the CSS selector you would use.
Create a button1 variable and use querySelector() to assign it your element with the id of button1. Remember that CSS id selectors are prefixed with a #.
20) We have run into a slight problem. You are trying to query your page for a button element, but your script tag is in the head of your HTML. This means your code runs before the browser has finished reading the HTML, and your document.querySelector() will not see the button - because the browser hasn't processed it yet.

To fix this, move your script element out of the head element, and place it at the end of your body element (just before the closing </body> tag.)
21) button1 is a variable that is not going to be reassigned. If you are not going to assign a new value to a variable, it is best practice to use the const keyword to declare it instead of the let keyword. This will tell JavaScript to throw an error if you accidentally reassign it.
Change your button1 variable to be declared with the const keyword.
22) Use querySelector() to get the other two button elements using their ids: button2 and button3. Store them in variables called button2 and button3. Remember to use const.
23) Similar to your #stats element, your #monsterStats element needs two span elements. Give them the class stat and give the first element the text Monster Name: and the second the text Health: . After the text in each, add a strong element with an empty nested span element. Give the first inner span element an id of monsterName and the second inner span element an id of monsterHealth.
24) Give your #text element the following text:
Welcome to Dragon Repeller. You must defeat the dragon that is preventing people from leaving the town. You are in the town square. Where do you want to go? Use the buttons above.
25) Now we need some quick styling. Start by giving the body a background-color set to #0a0a23.
26) Give the #text element a background-color of #0a0a23, a color of #ffffff, and 10px of padding on all sides.
27) Give your #game a maximum width of 500px and a maximum height of 400px. Set the background-color to #ffffff and the color to #ffffff.
Use margins to center it by setting the top margin to 30px, bottom margin to 0px, and the left and right margin to auto.
Finally, give it 10px of padding on all four sides. 
28) Using a selector list (selector1, selector2) give both your #controls and #stats elements a border of 1px solid #0a0a23, a #0a0a23 text color, and 5px of padding.
29) Give your #monsterStats element the same border and padding as your #stats element. Set its color to #ffffff and give it a #c70d0d background.
30) hide monsterStats with display property;
31) Next, give your .stat elements a padding-right of 10px.
32) Finally, you will need to add some styles for your buttons. Start by setting the cursor property to pointer. Then set the text color to #0a0a23 and the background-color to #feac32.
Then set the background-image property to linear-gradient(#fecc4c, #ffac33). Lastly, set the border to 3px solid #feac32.
33) Just like you did with the buttons, create variables for the following ids and use querySelector() to give them the element as a value:
text, xpText, healthText, goldText, monsterStats, and monsterName.
Remember to declare these with the const keyword, and name the variables to match the ids.
34) Finally, use querySelector() to get the #monsterHealth element. Because you have already declared a monsterHealth variable earlier, you need to use a different variable name for this element.
Declare a new variable with the const keyword and name it monsterHealthText.
35) Functions are special tools that allow you to run sections of code at specific times. You can declare functions using the function keyword. Here is an example of a function called functionName - note the opening and closing curly braces. These indicate the section of code that is within the function.
function functionName() {

}
Create an empty function named goStore.
36) For now, make your goStore function output the message "Going to store." to the console. For example, here is a function that outputs the message "Hello World".
function functionName() {
    console.log("Hello World");
}
37) Now create a goCave function that prints "Going to cave." to the console.
38) Now create a fightDragon function that prints "Fighting dragon." to the console.
39) comments
40) button1 represents your first button element. These elements have a special property called onclick, which you can use to determine what happens when someone clicks that button.
You can access properties in JavaScript a couple of different ways. The first is with dot notation. Here is an example of using dot notation to set the onclick property of a button to a function reference.
button.onclick = myFunction;
In this example, button is the button element, and myFunction is a reference to a function. When the button is clicked, myFunction will be called.
Use dot notation to set the onclick property of your button1 to the function reference of goStore. Note that button1 is already declared, so you don't need to use let or const.
41) follow the same step for button 2 and button 3
42) The innerText property controls the text that appears in an HTML element.
// <p id="info">Demo content</p> 
const info = document.querySelector("#info"); 
info.innerText = "Hello World"; 
The following example would change the text of the p element from Demo content to Hello World.
43) assign buyHealth method to button 1
44) assign buyWeapon and goTown method to button2 and button3
45) change the inner text of display text
48) In your goTown function, change your button elements' innerText properties to be "Go to store", "Go to cave", and "Fight dragon". Update your onclick properties to be goStore, goCave, and fightDragon, respectively.
Finally, update innerText property of your text to be "You are in the town square. You see a sign that says Store.".
49) You need to wrap the text Store in double quotes. Because your string is already wrapped in double quotes, you'll need to escape the quotes around Store. You can escape them with a backslash \. Here is an example:
50) You have repetition in the goTown and goStore functions. When you have repetition in your code, this is a sign that you need another function. Functions can take parameters, which are values that are given to the function each time it is run. Here is a function that takes a parameter called param:
function myFunction(param) {
    console.log(param);
}
Create an empty update function that takes a parameter called location.
51) In your role playing game, you will be able to visit different locations like the store, the cave, and the town square. You will need to create a data structure that will hold the different locations.
Use const to create a variable called locations and assign it an empty array.
52) In your role playing game, you will be able to visit different locations like the store, the cave, and the town square. You will need to create a data structure that will hold the different locations.
Use const to create a variable called locations and assign it an empty array.
53) Before you can begin to build out your locations array, you will first need to learn about objects. Objects are an important data type in JavaScript. The next few steps will be dedicated to learning about them so you will better understand how to apply them in your project.
Objects are non primitive data types that store key-value pairs. Non primitive data types are mutable data types that are not undefined, null, boolean, number, string, or symbol. Mutable means that the data can be changed after it is created.
Here is the basic syntax for an object:
{
  key: value
}
You will learn about keys and values in the next few steps.
For now, create a const variable called cat and assign it an empty object {}.
Below that cat variable, add a console.log(cat) statement to see the object in the console.
54) Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through properties.
Properties consist of a key and a value. The key is the name of the property, and the value is the data stored in the property.
Here is an example of an object with a single property:
const obj = {
  name: "Quincy Larson"
};
Inside your cat object, add a new property. The key should be name and the value should be the string "Whiskers".
Open up the console to see the updates to your object.
55) If the property name (key) of an object has a space in it, you will need to use single or double quotes around the name.
Here is an example of an object with a property name that has a space:
const spaceObj = {
  "Space Name": "Kirk",
};
If you tried to write a key without the quotes, it would throw an error:
const spaceObj = {
  // Throws an error
  Space Name: "Kirk",
}; 
56) There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.
Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
object.property;
Here is a sample of using dot notation (.) to read the name property of the developer object:
const developer = {
  name: "Jessica",
}
// Output: Jessica
console.log(developer.name); 
Update your console statement to access the name property of the cat object using dot notation.
Open up the console to see the name of "Whiskers" logged to the console.
57) The second way to access the properties of an object is bracket notation ([]). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.
objectName["property name"];
Here is a sample of using bracket notation to read an object's property:
const spaceObj = {
  "Space Name": "Kirk",
};
spaceObj["Space Name"]; // "Kirk"
Update your console statement to use bracket notation to access the property "Number of legs" of the cat object.
Open up the console to see the output.
58) Later on in the curriculum, you will dive deeper into objects. But for now, it is time to apply what you have learned to your role playing game.
Start by deleting your cat object and console statement.
59) Your locations array will hold different locations like the store, the cave, and the town square. Each location will be represented as an object.
Inside your locations array, add an object. Inside that object add a key called name with a value of "town square".
Remember to follow this syntax:
{
  key: value
}
60) Just like array values, object properties are separated by a comma. Add a comma after your name property and add a button text property with the value of an empty array.
Since the property name has a space in it, you will need to surround it with quotes.
{
  name: "Naomi",
  "favorite color": "purple"
}
61) Give your empty button text array three string elements. Use the three strings being assigned to the button innerText properties in the goTown function. Remember that array values are separated by commas.
62) Create another property in your object called button functions. Give this property an array containing the three functions assigned to the onclick properties in the goTown function. Remember that these functions are variables, not strings, and should not be wrapped in quotes.
63) Add one final property to the object named text. Give this property the same string value as the one assigned to text.innerText in the goTown function.
64) Now you can consolidate some of your code. Start by copying the code from inside the goTown function and paste it into your update function. Then, remove all the code from inside the goTown and goStore functions.
65) Instead of assigning the innerText and onclick properties to specific strings and functions, the update function will use data from the location that is passed into it. First, that data needs to be passed.
Inside the goTown function, call the update function. Here is an example of calling a function named myFunction:
myFunction();
66) Now it is time to use your update function. Pass in your locations array into the update function call.
You pass arguments by including them within the parentheses of the function call. For example, calling myFunction with an arg argument would look like:
myFunction(arg)
Pass your locations array into the update call.
67) The locations array contains two locations: the "town square" and the "store". Currently you are passing that entire array into the update function.
Pass in only the first element of the locations array by adding [0] at the end of the variable. For example: myFunction(arg[0]);.
This is called bracket notation. Values in an array are accessed by index. Indices are numerical values and start at 0 - this is called zero-based indexing. arg[0] would be the first element in the arg array.
68) Now your update function needs to use the argument you pass into it.
Inside the update function, change the value of the button1.innerText assignment to be location["button text"]. That way, you use bracket notation to get the "button text" property of the location object passed into the function.
67) location["button text"] is an array with three elements. Change the button1.innerText assignment to be location["button text"][0] which represents the first element of the array.
68) Now update button2.innerText and button3.innerText to be assigned the second and third values of the "button text" array, respectively.
69) Following the same pattern as you did for the button text, update the three buttons' onclick assignments to be the first, second, and third values of the "button functions" array.
70) Now update your goStore function to call the update function. Pass the second element of the locations array as your argument.
To make sure your refactoring is correct, try clicking your first button again. You should see the same changes to your webpage that you saw earlier.
71) Create two more empty functions named fightSlime and fightBeast. These functions will be used in your upcoming cave object.
73) Add a third object to the locations array. Give it the same properties as the other two objects.
Set name to cave. Set button text to an array with the strings "Fight slime", "Fight fanged beast", and "Go to town square". Set the "button functions" to an array with the variables fightSlime, fightBeast, and goTown. Set the text property to "You enter the cave. You see some monsters.".
74) Now that you have a "cave" location object, update your goCave function to call update and pass that new "cave" location. Remember that this is the third element in your locations array.
Don't forget to remove your console.log call!
75) Now that your "store" and "cave" locations are complete, you can code the actions the player takes at those locations. Inside the buyHealth function, set gold equal to gold minus 10.
For example, here is how you would set num equal to 5 less than num: num = num - 5;.
76) After the gold is updated, add a line to set health equal to health plus 10.
77) There is a shorthand way to add or subtract from a variable called compound assignment. For example, changing num = num + 5 to compound assignment would look like num += 5.
Update both lines inside your buyHealth function to use compound assignment.
78) Now that you are updating the gold and health variables, you need to display those new values on the game screen.
After your assignment lines, assign the innerText property of goldText to be the variable gold. Use the same pattern to update healthText with the health variable.
Here is an example:
let value = 100;
const total = document.querySelector('#total');
total.innerText = value;
You can test this by clicking your "Go to store" button, followed by your "Buy Health" button.
Note: Your answer should only be two lines of code.
79) What if the player doesn't have enough gold to buy health? You should use an if statement to check if the player has enough gold to buy health.

In the previous project, you learned how to work with if statements like this:

const num = 5;
if (num >= 3) {
  console.log("This code will run because num is greater than or equal to 3.");
}
Start by placing all of the code in your buyHealth function inside an if statement. For the if statement condition, check if gold is greater than or equal to 10.
80) Now when a player tries to buy health, it will only work if they have enough money. If they do not, nothing will happen. Add an else statement where you can put code to run if a player does not have enough money.

In the previous project, you learned how to work with else statements like this:

if (num >= 5) {

} else {

}
81) Inside the else statement, set text.innerText to equal "You do not have enough gold to buy health.".
82) Use const to create a weapons variable above your locations array. Assign it an empty array.
83) Just like your locations array, your weapons array will hold objects. Add four objects to the weapons array, each with two properties: name and power. The first should have the name set to "stick" and the power set to 5. The second should be "dagger" and 30. The third, "claw hammer" and 50. The fourth, "sword" and 100
84) Inside your buyWeapon function, add an if statement to check if gold is greater than or equal to 30.
85) Similar to your buyHealth function, set gold equal to 30 less than its current value. Make sure this is inside your if statement.
86) The value of the currentWeapon variable corresponds to an index in the weapons array. The player starts with a "stick", since currentWeapon starts at 0 and weapons[0] is the "stick" weapon.
In the buyWeapon function, use compound assignment to add 1 to currentWeapon - the user is buying the next weapon in the weapons array.
87) In the previous project, you learned how to use the increment operator to increase a variable by 1.
let num = 5;
num++;
// prints 6
console.log(num); 
Change your currentWeapon assignment to use the increment operator.
88) You should tell the player what weapon they bought. In between the two lines you just wrote, use let to initialize a new variable called newWeapon. Set this to equal weapons.
89) Use bracket notation to access an object within the weapons array and assign it to your newWeapon variable. Place the variable currentWeapon within the brackets.
When you use a variable in bracket notation, you are accessing the property or index by the value of that variable.
For example, this code uses the index variable to access a value of array.
let value = array[index];
90) weapons[currentWeapon] is an object. Use dot notation to get the name property of that object.
91) In the previous project, you learned how to work with the concatenation operator to insert variables into a string like this:
const organization = "freeCodeCamp";
// "Hello, our name is freeCodeCamp."
"Hello, our name is " + organization + ".";
Update the string "You now have a new weapon." to "You now have a " followed by the name of the new weapon, and remember to end the sentence with a period.
92) Back at the beginning of this project, you created the inventory array. Add the newWeapon to the end of the inventory array using the push() method.
In the previous project, you learned how to work with the push method like this:
const myArray = [];
myArray.push("new item");
// myArray is now ["new item"]
93) Up until now, any time text.innerText was updated, the old text was erased. This time, use the += operator to add text to the end of text.innerText.

Add the string " In your inventory you have: " - include the spaces at the beginning and the end.
94) Once a player has the best weapon, they cannot buy another one. Wrap all of the code in your buyWeapon function inside another if statement. The condition should check if currentWeapon is less than 3 - the index of the last weapon.
95) Arrays have a length property that returns the number of items in the array. You may want to add new values to the weapons array in the future.
Change your if condition to check if currentWeapon is less than the length of the weapons array. An example of checking the length of an array myArray would look like myArray.length.
96) You now have an error to fix. The currentWeapon variable is the index of the weapons array, but array indexing starts at zero. The index of the last element in an array is one less than the length of the array.
Change the if condition to check weapons.length - 1, instead of weapons.length.
97) Add an else statement for your outer if statement. Inside this new else statement, set text.innerText to "You already have the most powerful weapon!".
105) The next step is to create a variable called currentWeapon.
Notice that you already have a currentWeapon variable elsewhere in your code. Since this new currentWeapon variable will be inside an if statement, it will be scoped only to that block of code.
Scope is the term used to describe where a variable can be accessed. If a variable is declared inside a block of code, it is only accessible to the code inside that block. This is called block scope.
106) In the previous project, you learned how to work with the shift() method to remove the first element from an array like this:
Use the shift() method to take the first element from the inventory array and assign it to your currentWeapon variable.
107) After your currentWeapon, use the concatenation operator to set text.innerText to the string "You sold a ", then currentWeapon, then the string ".".
108) Now use the += operator to add the string " In your inventory you have: " and the contents of inventory to the text.innerText. Make sure to include the space at the beginning and end of the " In your inventory you have: " string.
109) Use an else statement to run when the inventory length is not more than one. Set the text.innerText to say "Don't sell your only weapon!".
110) Now you can start the code to fight monsters. To keep your code organized, your fightDragon function has been moved for you to be near the other fight functions.
Below your weapons array, define a monsters variable and assign it an array. Set that array to have three objects, each with a name, level, and health properties. The first object's values should be "slime", 2, and 15, in order. The second should be "fanged beast", 8, and 60. The third should be "dragon", 20, and 300.
111) Fighting each type of monster will use similar logic. Create an empty function called goFight to manage this logic.
112) In your fightSlime function, set fighting equal to 0 - the index of slime in the monsters array. Remember that you already declared fighting earlier in your code, so you do not need let or const here.
On the next line, call the goFight function.
113) Following the same pattern as the fightSlime function, use that code in the fightBeast and fightDragon functions. Remember that beast is at index 1 and dragon is at index 2. Also, remove the console.log call from your fightDragon function.
114) Following the same pattern as the fightSlime function, use that code in the fightBeast and fightDragon functions. Remember that beast is at index 1 and dragon is at index 2. Also, remove the console.log call from your fightDragon function.
114) At the end of your code, create two empty functions named attack and dodge.
115) Add a new object to the end of the locations array, following the same properties as the rest of the objects. Set name to "fight", "button text" to an array with "Attack", "Dodge", and "Run", "button functions" to an array with attack, dodge, and goTown, and text to "You are fighting a monster.".
116) In the goFight function, call your update function with the fourth object in locations as an argument.
118) By default, the HTML element that shows the monster's stats has been hidden with CSS. When the player clicks the "Fight dragon" button, the monster's stats should be displayed. You can accomplish this by using the style and display properties on the monsterStats element.

The style property is used to access the inline style of an element and the display property is used to set the visibility of an element.

Here is an example of how to update the display for a paragraph element:

const paragraph = document.querySelector('p');
paragraph.style.display = 'block';
Display the monsterStats element by updating the display property of the style property to block
119) Now, you will need to update the text for the current monster's name and health.

Start by assigning monsters[fighting].name to the innerText property of monsterName. Then, assign monsterHealth to the innerText property of monsterHealthText.
120) Now you can build the attack function. First, update the text message to say "The <monster name> attacks.", replacing <monster name> with the name of the monster. Remember you can use the concatenation operator for this.
121) On a new line, use the addition assignment operator(+=), to add the string " You attack it with your <weapon>." to the text value, replacing <weapon> with the player's current weapon. Additionally, remember that this line of text starts with a space so it will properly display.
122) Next, set health to equal health minus the monster's level. Remember you can get this from the monsters[fighting].level property.
123) Set monsterHealth to monsterHealth minus the power of the player's current weapon.

Remember that you can access the power of the player's current weapon using weapons[currentWeapon].power.
124) The Math object in JavaScript contains static properties and methods for mathematical constants and functions. One of those is Math.random(), which generates a random number from 0 (inclusive) to 1 (exclusive). Another is Math.floor(), which rounds a given number down to the nearest integer.

Using these, you can generate a random number within a range. For example, this generates a random number between 1 and 5: Math.floor(Math.random() * 5) + 1;.

Following this pattern, use the addition operator (+) to add a random number between 1 and the value of xp to your monsterHealth -= weapons[currentWeapon].power.
125) Update healthText.innerText and monsterHealthText.innerText to equal health and monsterHealth.
126) Add an if statement to check if health is less than or equal to 0. If it is, call the lose function.

127) You can make an else statement conditional by using else if. Here's an example:

if (num > 10) {

} else if (num < 5) {

}
At the end of your if statement, add an else if statement to check if monsterHealth is less than or equal to 0. In your else if, call the defeatMonster function.
128) At the end of your code, create the defeatMonster and lose functions. Leave them empty for now.
129) Inside the dodge function, set text.innerText equal to the string "You dodge the attack from the <monster>". Replace <monster> with the name of the monster, using the name property.
130) In your defeatMonster function, set gold equal to gold plus the monster's level times 6.7. Remember you can get the monster's level by using monsters[fighting].level.

Here is an example of setting num to num plus 5 * 8: num += 5 * 8. Use Math.floor() to round the result down.
131) Set xp to xp plus the monster's level.
132) Now update goldText and xpText to display the updated values.
133) Finish the defeatMonster function by calling the update function with locations[4] as the argument.
134) Your locations array doesn't have a fifth element, so locations[4] doesn't work.

Add a new object at the end of the locations array, following the same structure as the other objects. Set name to "kill monster", set "button text" to an array with three "Go to town square" strings, set "button functions" to an array with three goTown variables, and set text to "The monster screams Arg! as it dies. You gain experience points and find gold.".
135) The word "Arg!" should have quotes around it. Besides escaping quotes, there is another way you can include quotation marks inside a string.

Change the double quotes around the string "The monster screams Arg! as it dies. You gain experience points and find gold." to single quotes ', then add double quotes around "Arg!".
136) After a monster is defeated, the monster's stat box should no longer display.

On the first line of the update function, use monsterStats.style.display to change the display value to none.
137) In the lose function, call the update function and pass in the sixth object of your locations array. Note that you haven't created this object just yet.
138) At the end of your code, create a restart function. Inside this function, set xp to 0, health to 100, gold to 50, currentWeapon to 0, and set inventory to an array with the string stick.

Also update the innerText properties of goldText, healthText, and xpText to their current values.

Finally, call the goTown() function.
139) In the locations array, add another object at the end. Set the name property to "lose", set "button text" to an array with three "REPLAY?" strings, set "button functions" to an array with three restart variables, and set text to "You die. &#x2620;".

In a later step, you will update the code for the &#x2620; emoticon text to properly display on the page.
140) Back to your attack function - inside the else if block, create another if and else statement. If the player is fighting the dragon (fighting would be 2), call the winGame function. Move the defeatMonster() call to the else block.

For this step, you will need to use the strict equality (===) operator to check if fighting is equal to 2.
141) In order for the &#x2620; emoticon text to properly display on the page, you will need to use the innerHTML property.

The innerHTML property allows you to access or modify the content inside an HTML element using JavaScript.

Here is an example of updating the content for this paragraph element using the innerHTML property.
142) After the lose function, create a function called winGame. Inside the winGame function, call the update function and pass in locations[6].
143) Add another object in the locations array. Everything should be the same as the lose object, except the name should be "win" and the text should be "You defeat the dragon! YOU WIN THE GAME! &#x1F389;".
144) While your game is feature-complete at this stage, there are things you can do to make it more fun and engaging. To get started, you'll give monsters a dynamic attack value.

Inside your attack function, change your health -= monsters[fighting].level; line to health -= getMonsterAttackValue(monsters[fighting].level);. This sets health equal to health minus the return value of the getMonsterAttackValue function, and passes the level of the monster as an argument.
145) Below your attack function, create an empty function named getMonsterAttackValue. It should take level as a parameter.
146) The attack of the monster will be based on the monster's level and the player's xp. In the getMonsterAttackValue function, use const to create a variable called hit. Assign it the equation (level * 5) - (Math.floor(Math.random() * xp));.

This will set the monster's attack to five times their level minus a random number between 0 and the player's xp.
147) Log the value of hit to the console to use in debugging. Remember that you can do this with console.log().
148) In the previous project, you learned how to work with the return keyword to return a value from a function like this:

function add(num1, num2) {
  return num1 + num2;
}
Use the return keyword to return the value of hit at the end of the function.
149) If you play the game in its current state you might notice a bug. If your xp is high enough, the getMonsterAttackValue function will return a negative number, which will actually add to your total health when fighting a monster! You can fix this issue by using a ternary operator to ensure negative values are not returned.

The ternary operator is a conditional operator and can be used as a one-line if-else statement. The syntax is: condition ? expressionIfTrue : expressionIfFalse.

Here is an example of returning a value using an if-else statement and a refactored example using a ternary operator:

// if-else statement
if (score > 0) {
  return score
} else {
  return default_score
}

// ternary operator
return score > 0 ? score : default_score
In getMonsterAttackValue, change return hit to a ternary operator that returns hit if hit is greater than 0, or returns 0 if it is not.
150) In your attack function, below the health variable, create an if statement. Set the condition to call the isMonsterHit function.
151) Move your monsterHealth assignment into your if block.
152) Add an else statement to the first if statement inside your attack() function. In the else statement, use the += operator to add the text " You miss." to the end of text.innerText.
153) Now create the isMonsterHit function. This will return a boolean value (true or false) to be used in your if statement. Return the result of the comparison Math.random() > .2.
154) The player should hit if either Math.random() > .2 or if the player's health is less than 20.

At the end of your return statement, use the logical OR operator || and check if health is less than 20.

The logical OR operator will use the first value if it is truthy – that is, anything apart from NaN, null, undefined, 0, -0, 0n, "", and false. Otherwise, it will use the second value.

For example: num < 10 || num > 20.
155) On every attack, there should be a chance that the player's weapon breaks. At the end of the attack function, add an empty if statement with the condition Math.random() <= .1.
156) Use the += operator to add " Your <weapon> breaks.", with a space in front of Your, to the end of text.innerText. Replace <weapon> with the last item in the inventory array using inventory.pop(), which will remove the last item in the array AND return it so it appears in your string.
157) Remember that the increment operator ++ can be used to increase a variable's value by 1. There is also a decrement operator -- that can be used to decrease a variable's value by 1. For example :

let num = 10;
num--;
console.log(num); // Output: 9
Decrement the value of currentWeapon in your if statement, after you update the text.
158) We don't want a player's only weapon to break. The logical AND operator checks if two statements are true.

Use the logical AND operator && to add a second condition to your if statement. The player's weapon should only break if inventory.length does not equal (!==) one.

Here is an example of an if statement with two conditions:

if (firstName === "Quincy" && lastName === "Larson") {

}

161) Create two new functions named pickTwo and pickEight.

Inside each of those, call the pick() function and pass either 2 or 8 as the argument depending on the function name.
162) Add another object to your locations array. Set name to "easter egg", set "button text" to an array with the strings "2", "8", and "Go to town square?", set "button functions" to an array with the variables pickTwo, pickEight, and goTown, and text to "You find a secret game. Pick a number above. Ten numbers will be randomly chosen between 0 and 10. If the number you choose matches one of the random numbers, you win!".
163) After your numbers array, create a while loop that runs as long as numbers.length is less than 10.

In the previous project, you learned how to work with while loops like this:

while (condition) {
 
 // code to run
}

165) Inside your while loop, push a random number between 0 and 10 to the end of the numbers array. You can create this random number with Math.floor(Math.random() * 11).
166) After the while loop, set text.innerText to equal "You picked <someGuess>. Here are the random numbers:". Replace <someGuess> with the guess function parameter.
167) At the end of the string, before the final quote, insert the new line escape character \n. This will cause the next part you add to text.innerText to appear on a new line.
168) In the previous project, you learned how to work with for loops like this:

for (let i = 0; i < 5; i++) {
  // code to run
}
for loops are declared with three expressions separated by semicolons: for (a; b; c), where a is the initialization expression, b is the condition, and c is the final expression.

In this step, create a for loop where i is initialized to 0, the loop runs as long as i is less than 10, and i is incremented by 1 after each iteration using the increment operator ++.
169) Now you can write the logic to run in the loop. Inside your for loop, use the += operator to add to the end of text.innerText. Add the number at index i of the numbers array, using numbers[i]. Then add a new line, using the escape sequence you used earlier.
170) The .includes() method determines if an array contains an element and will return either true or false.

Here is an example of the .includes() syntax:

const numbersArray = [1, 2, 3, 4, 5]
const number = 3

if (numbersArray.includes(number)) {
  console.log("The number is in the array.")
}
After your for loop, add an if statement to check if the guess is in the numbers array. You can use the .includes() method to check if the array contains the guess.
171) Inside the if statement, add the string "Right! You win 20 gold!" to the end of text.innerText. Also, add 20 to the value of gold and update the goldText.innerText
174) Looking at your "kill monster" object, "button functions" currently has three goTown variables. Replace the third one with easterEgg - this is how a player will access the hidden feature of the game. Do not change the "button text".

With this, your RPG game is complete! You can now play around - can you defeat the dragon?



### calorie counter ###
1) form tag, id="calorie counter"
2) In your form, users will be able to input a number which represents their daily calorie budget.
Create a label element, give it a for attribute set to budget and the text Budget, then create an input element with the id set to budget.
3) Your input element needs some additional attributes. Give it a type set to number to only allow numeric inputs, a min attribute set to 0 to only allow positive numbers, and a placeholder set to Daily calorie budget.
Finally, mark the input element as required.
4) In your form, users should have the capability to add various meal types along with their calorie counts.
Create a fieldset element with the id set to breakfast.
Within that element, create a legend with the text Breakfast, and an empty div with the class set to input-container.
5) Next, create a fieldset element with the id set to lunch.
Within that element, create a legend element with the text Lunch, and an empty div with the class set to input-container.
6) Continuing the pattern, create a fieldset for dinner with the same nested elements.
7) You need two more of these fieldset code blocks – one for snacks and one for exercise.
8) When users want to select a meal type to input their calorie counts, they should be presented with a dropdown menu and a button to add the meal type.
Start by creating a div element and assign it a class attribute with the value controls. Then, nest a span element inside this div.
9) In your span element, create a label element for an entry-dropdown and give it the text Add food or exercise:. Then create a select element with the id set to entry-dropdown and a name set to options. Below that, add a button element with the id set to add-entry and the text Add Entry.
Give your button element a type attribute set to button to prevent automatic form submission.
10) Your select menu needs options for each of the food and exercise fieldset elements you created in the previous steps. Use the option element to create a new option for each fieldset. The value attribute of each option should be the id of the fieldset, and the text of each option should be the text of the legend.
Set the Breakfast option as the selected option.
11) Create another div element. Within it, nest a button to submit the form. This button should have the text Calculate Remaining Calories.
Then add a button with the id set to clear to clear the form (don't forget to give it a type attribute that prevents it from submitting the form). This button needs the text Clear.
12) Your form needs somewhere to display the results. Add an empty div element and give it an id of output and the class values of output and hide.
13) Finally, you need to link your JavaScript file to your HTML. Create a script element to do so.
14) It is time to start writing the script that makes your form work.
To access an HTML element with a given id name, you can use the getElementById() method. Here's an example of how to use this method:
<h1 id="title">Main title</h1>
const mainTitleElement = document.getElementById('title');
Begin by getting the form element (using the id) and storing it in a variable called calorieCounter.